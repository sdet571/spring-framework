
ðŸ”¹ What is coupling in Java ?
Â· Usage of an object by another object.
Â· It simply means that one object requires another object to complete its assigned task.
Â· There are two types of coupling:
     Â· Tight Coupling
          Â° A group of classes are highly dependent on one another.
          Â° A class has a direct reference to a concrete class.
     Â· Loose Coupling
          Â° An object gets the object to be used from external sources.
          Â° Reduces the dependencies of a class that uses the different classes directly.


ðŸ”¹ SPRING CORE
Spring core is the part of the Spring framework providing the foundational mechanism used by Spring to integrate into apps.
Â· Spring AOP Â· Spring ORM Â· Spring DAO Â· Spring Web Â· Spring Context Â· Spring Web MVC Â· Spring Core


ðŸ”¹ IOC (Inversion of Control)
IoC is a principle is we don't let the app control the execution by its own code and use dependencies. Instead,
we allow the framework to control the app and its code.
Advantages :
   Â· Decoupling the execution of a task from its implementation
   Â· Making it easier to switch between different implementation
   Â· Great ease in testing a program by isolating a component or mocking it dependencies


           POJOs = application classes
                       â†“
Configuration â†’  Spring Container
                       â†“
              Completely configured
              application system

ðŸ”¹ Spring Container
Â· IoC Container is tasked with the responsibility of connecting BEANS together to build a working application and it does
so by reading a configuration provided by developer.
Â· IoC container is external authority that passes a dependency to a dependent object that will use.
Â· Having an external responsible for injecting dependencies allows very loosely coupled applications to built.

ðŸ”¹ Spring Bean
Â· Spring Bean is simply Java Object.
Â· A bean is an object that is created and managed by Spring Container.
Â· Spring beans are created from POJOs

ðŸ”¹ Types of Spring Container
There are 2 types of IoC containers:
â˜… Spring BeanFactory Container
     Â· It is defined by org.springframework.beans.factory.BeanFactory interface.
     Â· Root interface for accessing spring bean container
     Â· Some implementation classes are : (https://docs.spring.io/spring-framework/docs/current/javadoc-api/ org/springframework/beans/factory/BeanFactory.html)
          Â· XmlBeanFactory
          Â· DefaultListableBeanFactory
          Â· SimpleJndiBeanFactory
â˜… Spring ApplicationContext Container
    Â· It is defined by org.springframework.context.ApplicationContext interface.
    Â· ApplicationContext container has all the functionalities of BeanFactory
    Â· Generally recommended over BeanFactory
    Â· Implementation classes are: (https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ ApplicationContext.html)
          Â· AnnotationConfigApplicationContext
          Â· ClassPathXmlApplicationContext
          Â· WebXmlApplicationContext

ðŸ”¹ Adding new beans to the Spring Context
   Â· There are multiple ways to add beans in the Spring context
          Â· Using the @Bean annotation
               Â° Define a configuration class (annotated with @Configuration).
               Â° Add to the configuration class a method that returns the object instance that you want to add to the
               context and annotate the method with the @Bean annotation.
               Â° Make Spring use the configuration class defined in the first step.
          Â· Using stereotype annotations


ðŸ”¹ @Primary
Â· A primary bean is the one that Spring will choose if it has multiple options, and you do not specify a name.
Â· The primary bean is simply the default choice of Spring.



Test test test